第7章 复用类

7.1 组合语法
		1-将对象置于新类中，再添加自己的属性和行为
		2-每一个非基本类型的对象都有toString()
		3-治愈新类中的对象会优先初始化
		
7.2 继承语法
		1-继承关键字：extends
		2-Java中所有的类继承Object类
		3-初始化基类
			 1.创建一个导出类时，该对象包含了一个基类的子对象
			 2.导出类的构造器中开头会默认调用基类的构造器
			   所以，基类会在导出类访问前初始化
		4-带参数的构造器
			 1.通过super(参数)显示的调用基类构造器的语句
			 
7.3 代理
		1-在Java中java.lang.reflect包下提供了一个Proxy类和一个InvocationHandler接口，
	      通过使用这个类和接口就可以生成动态代理对象。JDK提供的代理只能针对接口做代理。
		
7.4 结合使用组合和继承
		1-确保正确清理
		     1.finally()一定被执行，尽量避免使用finalize()
		2-名称屏蔽：
			 1.重载机制可以正常的在基类和导出类中工作
			 2.@Override注解表示重写
			 
7.5 在组合与继承之间选择
		1-组合技术：在新类中使用现有类的功能而非它的接口
			 1.一般把成员对象设置为private私有
			 2.特殊情况设置为public，提供多种包权限的类对象
		
7.6 protected关键字
		1-通过protected方法来控制类的继承者的访问权限
		
7.7 向上转型
		1-新类和基类的关系：新类是现有类的一种类型
		2-为什么叫向上转型：类继承图
			 1.导出类转型成基类
			 2.可能丢失方法
		3-再论组合与继承：
			 1.通过判断是否使用向上转型，
			   是，继承
			   否，组合
		
7.8 final关键字
		1-final的三种情况：数据，方法和类
		2-final数据;
			 1.编译期常量：
			    必须是基本数据类型
				必须是final表示
				必须定义时赋值
			 2.一个运行时被初始化的值，不希望被改变
			 3.一个即static又final的域是一段不能改变的存储空间
			   全用大写字母命名，
			   字与字用下划线隔开
			 4.final修饰对象引用，即引用被初始化指向一个对象，就无法把它再指向其他对象，
			   但对象自身却可以修改
			 5.被final修饰的数据不一定在编译时知道它的值，有可能在运行时随机生成
			 6.空白final：被声明为final但又为给定初始的域
			   但必须在使用前初始化
			 7.final参数：
				 被final修饰的参数引用不能在方法中改变其所指向的对象
				 被final修饰的基本类型无法在方法中改变其本身
		3-final方法
			 1.为了防止方法在继承时，被重写
			 2.final和private关键字
			     类中所有的private方法都被隐式的指定为final
				 private方法不是基类的接口中的一部分
		4-final类
			 1.不能被继承和改变
			 2.成员变量可以定义为final或非final
			 
7.9 初始化及类的加载
		1-创建类的第一个对象或访问static域与static方法时，加载
		2-继承与初始化
		     1.优先加载基类，并初始化基类的静态方法再加载导出类的静态方法
			 2.接着初始化基类成员和构造器，最后初始化导出类成员和构造器
		
7.10 总结





