第9章 接口
接口与内部类提供了一种将接口与实现分离的更结构化的方法

9.1 抽象类和抽象方法
		1-用abstract关键字修饰抽象类和方法
		    抽象方法仅有声明，没有方法体
		2-抽象类中不一定有抽象方法,但是有抽象方法的类一定是抽象类
		
9.2 接口
		1-接口是一个完全抽象的类，用interface关键字修饰
		2-接口用来建立类与类之间的协议
		3-通过创建一个能够向上转型为多中基类的类型，实现多重继承
		4-实现接口：implements关键字
		  接口类仅能被public和默认修饰
		5-接口中的方法默认声明为public，即使没有声明
		
9.3 完全解耦
		1-策略设计模式：方法中包含要执行的算法中固定不变的部分，而策略包含变化的部分
		  根据所传递的参数对象的不同而具有不同行为的方法
		2-遵循接口编写类
		3-适配器设计模式：适配器中的代码将接受你所拥有的接口，并产生需要的接口
		
9.4 Java的多重继承
		1-implements关键字之后的多个接口用逗号隔开
		2-使用接口的核心原因：
			 1.为了能向上转型为多个基类型
			 2.和抽象一样，防止创建该类的对象
			
9.5 通过继承来扩展接口
		1-可以继承多个接口
		2-组合接口时的名字冲突
			 1.一个类继承，又实现一个接口，
			   如继承的类中的方法和接口中的方法同名，
			   则新类中可以不用实现该方法，以继承类的方法覆盖
			 2.继承多个接口时，如发生方法重载，将报错
			  		
9.6 适配接口
		1-把参数设置为接口，任何实现该接口的类，都可以调用该参数方法
		
9.7 接口中的域
		1-1.5版本之前，接口用来生成常量，默认被static，final修饰
		2-初始化接口中的域
			 1.在接口中定义的域不能是空final，但是可以被非常量表达式初始化
			 2.这些域不是接口的一部分，它们的值被存储在该接口的静态存储区域内	
			 3.接口中的域是自动public
		
9.8 嵌套接口
		1-类中嵌套接口，跟内部类相似，
		  接口也可以被private，无法向上转型
		2-接口嵌套接口，接口内的成员必须是public，即嵌套接口只能是public
		  实现某个接口，并不需要实现嵌套接口
9.9 接口与工厂
		1-工厂设计模式：在工厂对象上调用的创建方法，把另一个接口对象组合进来，
		  然后再分别生成工厂接口和组合接口的具体实现类
		  在其他类中通过工厂类接口的参数方法，生成组合接口的对象，再调用方法
		  通过不同的具体工厂类，确定类型
9.10 总结
		1-优先选择类，而不是接口




