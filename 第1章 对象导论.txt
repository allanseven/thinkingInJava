第1章 对象导论
     --面向对象程序设计-OOP允许根据问题来描述问题，而不是根据运行的解决方案的计算机来描述。
1.1 抽象过程--解决问题的复杂性取决于抽象的类型和质量
	      机器模型(解空间)--待解问题模型(问题空间)
	    1-汇编语言是对底层机器的轻微抽象，C语言则是对汇编语言进一步抽象，但是，
		  C语言的主要抽象仍要求解决问题时基于计算机的结构，而不是解决问题的结构。
		2-只针对待解决的问题建模：基于约束条件编程的语言和通过对图形符号操作来思想的语言。
		     1.局限性：超出特定领域，则有问题
		3-面向对象方式提供表示问题空间中的元素的工具而更进一步。
		     1.将问题空间中的元素及其在解空间中的表示成为--对象！
			 2.实质是程序可以通过添加新类型的对象使自身适合于某个特定的问题
		4-五个基本特性：
			 1.万物皆对象
			 2.程序是对象的集合，它们通过发送消息来告知彼此所要做的
			 3.每个对象都有自己的由其他对象所构成的存储
			 4.每个对象都拥有其类型
			 5.某一特定类型的所有的对象都可以接受同样的消息。
		5-对象具有状态，行为和标识。即属性，方法和对象在内存中的唯一地址
1.2 每个对象都有一个接口
		1-创建抽象数据类型是面向对象程序设计的基本概念之一
		  类描述了具有相同特性和行为的对象集合--数据类型
		2-有用的对象--某种方式产生对对象的请求--请求由对象的接口定义--决定接口的是类型
		3-UML图：同一建模语言
		
1.3 每个对象都提供服务
		1-将对象作为服务提供者看待
		2-内聚性--一个对象只做一件事情
		
1.4 被隐藏的具体实现
		1-类创建者和客户端程序员
		2-访问控制：
			 1.让客户端程序员无法触及他们不应该触及的部分
			 2.允许类创建者可以改变类内部的工作方式而不会影响客户端程序员。
			 
1.5 复用具体实现
		1-组合：使用现有的类合成新的类
		  组合是动态发生，则称为聚合
		
1.6 继承
		1-在基类的基础上，产生导出类
		2-基类和导出类具有相同的类型
		3-替代原则：一个导出类对象可以完全替换一个基类对象
		     --is a 是一个的关系
		4-如导出类中有基类中没有的接口，则不完全替代
			 --is like a 像是一个的关系
			 
1.7 伴随多态的可互换对象
		1-把一个对象不当作它所属的特定类型来对待，而将其当作基类的对象来对待
			 --编写出不依赖类型的代码
		2-一个非面向对象编程的编译器产生的行数调用会引起--前期绑定
		     --面向对象编程--后期绑定
		3-Java中动态绑定是默认的
		4-将导出类看做是它的基类的过程称为向上转型
		
1.8 单根继承结构
		1-Java的超类是Object
		2-在单根继承结构中的所有对象都具有一个公共的接口
		     --保证所有的对象都具有某些功能。
		3-单根继承是垃圾回收器的实现变得简单。
		  所有的对象都保证具有其类型信息，不会因无法确定对象的类型而陷入僵局。
		  
1.9 容器
		1-创建一种新对象类型，持有其他对象的引用
		2-List，Set,Map
		3-多种容器：
			 1.不同容器提供了不同类型的序列
			 2.不同的容器对于某些操作具有不同的效率
		4-参数化类型--泛型<类型>
		
1.10 对象的创建和生命期
		1-采用动态内存分配方式--new创建对象
		2-对象生命周期:	垃圾回收机器	
		3-在栈中，编译器可以确定对象的存活时间
		  在堆中，编译器无法确定？？？
		
1.11 异常处理：处理错误
		1-异常是一种对象，与正常执行路径并行的另一条路径
		2-Java中内置异常处理，且强制必须使用它
		
1.12 并发编程
		1-同一时间处理多个任务
		2-线程是一种为单一处理器分配执行时间的手段
		3-隐患：贡献资源--同步方式解决
		
1.13 Java与Internet
		1-客户/服务器计算计算
		2-Web是一台巨型客户/服务器系统
		3-客户端编程：参数几乎相同，而平台不同
			 1.插件：添加新功能
			 2.脚本语言：将客户端源代码嵌入HTML页面中，需要插件解释该语言
				 --代码会暴露
			 3.Javascript不需要插件就可运行在Web浏览器
			 4.Java使用Applet小程序
			 5.Flash Player是事实上以被接受的标准。？？？
			 6. .NET和C#：无法跨平台？？？
		4-服务器端编程
			 1.Java的Web服务器端--servlet及其衍生物JSP
				
1.14 总结
		1-过程型语言：数据定义和函数调用。
		2-了解多种编程语言--Python
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	