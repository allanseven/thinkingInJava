第2章 一切都是对象

2.1 用引用操纵对象
		1-操作的标识符--引用	
2.2 必须由你创建所有对象
		1-通过new创建对象
		2-存储的地方
			 1.寄存器：最快的存储区，在处理器内部
			 2.堆栈：位于通用RAM中(随机访问存储器)，--保存对象引用
			 3.堆：通用的内存池(位于RAM区)，--保存Java对象
			 4.常量存储：存放在程序代码内部/ROM中(只读存储器)
			 5.非RAM存储: 数据存活于程序之外，不受程序的控制--流对象和持久化对象
		3-特例：基本类型
			 1.一个并非是引用的变量，存储值，并置于堆栈中。
			 2.java中的基础类型所占存储空间的不变性
			 3.所有的数值类型都有正负号
			 4.boolean类型所占存储空间的大小没有明确指定。仅定义为字面值true和false
			 5.基本类型具有包装器类，可以在堆中创建一个非基本对象来表示基本类型。
		4-高精度数字：
			 1.BigInteger和BigDecimal大体上属于包装器范畴，但没有对应的基本类型
			 2.它们和基本类型所能执行的操作相似，但以速度换取精度。
			 3.BigInteger支持任意精度的整数，BigDecimal支持任意精度的定点数
		5-Java中的数组
			 1.Java确保数组会被初始化，而且不能在它的范围之外被访问
				 --这种范围检查以数组上少量的内存开销及运行时的下标检查为代价换来安全与效率的提高
			 2.创建一个数组对象--引用数组
				 --会自动初始化为一个默认值null				 
			 3.在使用任何引用前，必须指定一个对象，
			   如果用一个null的引用，在运行时会报错
			 4.基础类型数组--默认值是0或0.0
			 
2.3 永远不需要销毁对象
		1-作用域：
			 1.它决定了在其内定义的变量名的可见性和周期性
				 --{ }
			 2.在作用域里定义的变量只可作用于该作用域的范围内
			 3.Java是一种自由格式的语言，空格，制表符和换行不会影响程序的执行
		2-对象的作用域
			 1.Java对象不具备和基本类型一样的生命周期
				 --它可以存活于作用域之外
			 2.由new创建的对象，如果需要可以一直存在，由垃圾回收器回收
			 
2.4 创建新的数据类型：类
		1-用class关键字标识一个新的类型
		2-字段和方法
			 1.字段可以是引用类型和基本类型
			 2.访问：
			         对象引用.成员名称
					 ...对象引用.对象引用.成员名称--访问多重包含对象的成员
		3-基本类型默认值
			 1.成员是基本类型，Java进行初始化默认值
			 2.局部变量并不会确保初始化，其变量可能得到任意值，
			   在使用前应赋值，如果没有会产生编译时错误
			   
2.5 方法、参数和返回值
		1-方法：表示做某些事情的方式
			 1.组成：名称，参数，返回值和方法体
			 2.方法名和参数列表唯一的标识出方法
			 3.只有通过对象来调用
			 4.调用方法的行为通常称为发送消息给对象
		2-参数列表：指要传递给方法什么样的消息
			 1.在参数列表必须指定所传递对象的类型和名称
			 2.传递的是引用
			 3.返回值用return关键字返回值
			   没有返回值，用void关键字标识返回类型
		
2.6 构建一个Java程序
		1-名字的可见性
			 1.包名--域名反转--小写
		2-运用其他构件
			 1.使用import关键字告诉编译器要导入的其他类
		3-static关键字
			 1.只有执行new创建对象时，数据存储空间才被分配，其方法才能供外界调用
			 2.两种情况无法用上述方法：
				 1、只想为特定域分配单一存储空间，而不考虑创建对象
				 2、希望方法不与包含它的类的任何对象关联在一起，即没有创建对象，也可以调用方法
				 3、static成员有两种调用方式：
				      通过对象调用
					  通过类名调用
				 
2.7 你的第一个Java程序
		1-Java.lang包默认导入Java文件中
		2-必须包含一个main的主方法
		3-编译和运行：Javac和Java命令
		
2.8 注释和嵌入式文档
		1-两种注释方式：
			 1./*   */
			 2.//
		2-注释文档
			 1.Javadoc用于提取注释的工具
			 2.Javadoc的两种方式：
				 1.嵌入式HTML
				 2.文档标签：以@字符开头
			 3.所有的Javadoc命令只能在/**   */注释中出现
			 4.Javadoc只可以为public和protected成员进行文档注释
		3-注释标签：
			 tag						描述						例子
			@author		用于class和interface的声明中，表示作者		@author 作者名
			@param		用于构造函数及函数的参数说明				@param 参数名 参数说明
			@return			表示函数的返回值						@return 函数返回值说明
			@throws			标识出方法可能抛出的异常				@throws RuntimeException 描述
			@exception			和@throws一样，官网推荐用@throws	
			@see			链接目标，@see Tag只能顶格写			@see 其他类
			{@link}			和@see类似，但可以放在任意位置			{@link 其他类名}
			@since					引入新功能						@since 2.0，2.0版本开始加入的新功能
			@version				指定类的版本					@version info
			@deprecated				类或成员deprecated的旧特性		不建议使用	        
			{@value}		显示常量的值，该常量必须是final属性	
			{@code }		
			{@docRoot}				文档的根路径
		4-Eclipse中生成文档：
			 “Project”->“Generate Javadoc”->“Configure”
		
2.9 编码风格
		1-驼峰风格
		
2.10 总结
		1-学习整体的Java概念思想


















