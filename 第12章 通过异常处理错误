第12章 通过异常处理错误

12.1 概念
		1-用强制规定的形式来消除错误处理过程中随心所欲的因素
		2-使用异常能降低错误处理代码的复杂度：把正常代码和问题代码分离
12.2 基本异常
		1-异常情形：指阻止当前方法或作用域继续执行的问题--抛出异常
		  普通问题：总能处理的错误
			 1.异常处理程序：异常处理监管程序后，继续执行程序的地方
			 2.异常把每件事当作一个事务考虑
			 3.异常最重要的方面之一：如果发生问题，将不再允许程序沿着其正常的路径继续执行下去
		2-异常参数
			 1.用new在堆上创建异常对象
			 2.有两个构造器：默认和接受字符串作为参数
			 3.关键字throw返回异常对象
		3-class Throwable是所有异常的根类
12.3 捕获异常
		1-监控区域的概念
			 1.try块：try{}
		2-异常处理程序：跟在try块后，用关键字catch捕获，匹配catch的参数才会执行
		3-终止与恢复
			 1.Java支持终止模式：异常被抛出，程序终止
			 2.恢复模式：异常被处理之后，程序能继续执行
12.4 创建自定义异常
		1-Java提供的异常体系并不包含所有的异常，因此需要我们自己定义异常
		2-由编译器创建默认构造器，自动调用基类的默认构造器
			 1.使用System.err标准错误流比System.out好，System.out会重定向
			   java中的System.out是行缓冲，System.err是无缓冲
			 2.为异常类定义一个接受字符串参数的构造器
			 3.e.printStackTrace(System.out)--信息发送到System.out			
		3-异常与记录日志
			 1.Java.util.logging工具将输出记录到日志中
			 2.重写Throwable.getMessage()，类似toString()方法
12.5 异常说明
		1-在方法声明上，以关键字throws抛出
		2-可以在声明方法将抛出异常，但实际不抛出
		  一般在定义抽象基类和接口时用到
		3-编译时被强制检查的异常--被检查的异常
12.6 捕获所有异常
		1-Exception是与编程相关的所有异常的基类
		2-Throwable类的方法
			 1.printStackTrace()信息发送到标准错误流
			 2.printStackTrace​(PrintStream s)信息发送到指定的打印流。
			 3.printStackTrace​(PrintWriter s)信息发送到指定的打印编写器。
			 4.fillInStackTrace()填写执行堆栈跟踪。
			 5.getMessage()返回此throwable的详细消息字符串。
			 5.getLocalizedMessage()创建此throwable的本地化描述。
			 6.toString()返回此throwable的简短描述。
			 7.getCause()返回此可抛出事件的原因，或者null原因不存在或未知。
		3-栈轨迹
			 1.getStackTrace()提供对printStackTrace()访问，返回一个由栈轨迹中的元素所构成的数组。
			   StackTraceElement中的getMethodName()方法获取每个元素
		4-重新抛出异常
			 1.在catch子句中重新把异常抛给上一级异常处理程序，同一个try块的后续catch子句将被忽略
			   此时printStackTrace()依然是原来异常抛出点的调用栈信息，调用fillInStackTrace()更新信息
			 2.如果捕获之后抛出另一种异常，得到的效果类似于fillInStackTrace()，原有异常信息丢失
			 3.不必为异常清理担心，因为用new创建对象，垃圾回收器会自动回收
		5-异常链
			 1.在捕获一个异常后抛出另一个异常。并把原异常信息保留下来--异常链
			 2.通过Throwable​(Throwable cause)，
				 子类：	
					 Error​(Throwable cause)
					 Exception​(Throwable cause)
					 RuntimeException​(Throwable cause)
			 3.如果要把其他异常连接起来，使用initCause()方法而不是构造器
		
12.7 Java标准异常
		1-Throwable分为两大类：
			 1.Error系统异常和Exception可被抛出异常
		2-异常的基本概念是 用名称代表发生的问题
		3-特例：RuntimeException​--不受检查异常
			 1.编译器对该异常类型不需要异常说明，输出给System.err
			 2.RuntimeException​没有被捕获，直达main(),程序在退出前会调用printStackTrace()		
		
12.8 使用finally进行清理
		1-无论异常是否抛出，finally子句可以得到执行
		2-finally用来做什么
			 1。把除内存之外的资源恢复到它们的初始状态时：打开的文件或网络连接
		3-当有break和continue语句的时候，finally子句也可以得到执行
		4-在return中使用finally
			 1.在方法中可以有多个返回点，不影响finally的执行
		5-缺憾：异常丢失
			 1.在try...finally中，try块中的异常丢失，只执行finally中的异常
			 2.在try...finally中有return，try块中的异常丢失，只执行finally中的return
			
12.9 异常的限制
		1-当覆盖方法时，只能抛出基类方法声明上的异常
		2-派生类构造器的异常说明必须包含基类构造的异常说明
		3-基类抛出异常，派生类可以没有异常
		4-基类的方法没有异常抛出,子的重写方法不能有异常抛出
		5-接口中的方法异常不会被传递给实现类
		6-如果多态的方式的对象，编译器捕获的是基类的异常
		
12.10 构造器
		1-在构造阶段可能会抛出异常，并且要求清理的类，最安全的使用方式是使用嵌套的try子句
		2-在创建需要清理的对象之后，进入一个try...finally语句块
		3-在嵌套try...finally语句块，从里层finally开始执行
		
12.11 异常匹配
		1-派生类的对象也可以匹配其基类的处理程序
		2-如果把捕获基类的catch子句放在最前面，把派生类的异常给屏蔽掉，编译器会报错
		
12.12 其他可选方式
		1-重要目的：把错误处理的代码同发生的地点分离
		2-被检查的异常强制处理错误的时候加上catch子句--吞噬既有害
		3-把异常传递给控制台：public static void main(String[] args) throws Exception{
		4-把被检查的异常转换为不检查的异常
		5-通过异常链：把被检查的异常包装进RuntimeException中
		
12.13 异常使用指南
		1-在知道如何处理的时候才捕获异常
		2-解决问题并重新调用产生异常的方法
		3-进行少许修补，然后绕过异常发生的地方继续进行
		4-用别的数据进行计算，以代替方法预计会返回的值
		5-把当前运行环境下能做的事情尽量做完，然后把相同的异常重抛到更高层
		6-把当前运行环境下能做的事情尽量做完，然后把不相同的异常重抛到更高层
		7-终止程序
		8-进行简化
		9-让类库和程序更安全
12.14 总结





