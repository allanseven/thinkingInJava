第3章 操作符

3.1 更简单的打印语句
		1-通过静态导入Print类，实现简化打印
		
3.2 使用Java操作符
		1-操作符接受一个或多个参数，生成一个新值
		2-几乎所有的操作符只能操作基本类型，
		  例外：= , == , !=  这些操作符能操作所有的对象、
		3-String类支持+和+=		  
		
3.3 优先级
		1-当多个操作符存在，优先级决定计算顺序
		2-括号优先级最高，自增自减，先乘除后加减
		3-String后面跟者+号，表示字符串连接符，会把非String类型转换为String类型		
		
3.4 赋值
		1-赋值操作符：  =,+=,-=,*=,/=,%=
		  把等号右边的数值复制给左边		  
		2-常数不能作为左边被赋值
		3-为基础类型赋值：右边的值不变
		4-为对象赋值：实际操作的是对象的引用地址值
		5-别名现象：通过赋值，原先的引用被覆盖，一个对象两个引用
		6-要保持两个对象相对独立：t1.one = t2.two;
		7-方法调用中的别名问题：参数是一个对象的引用，
		     --实际改变的是方法之外的对象：y.c = 'c'			 
		
3.5 算术操作符
		1-java的基本操作符与其他语言是相同的，
		  整数除法会直接去掉结果的小数位
		2- +, -, *, /, %(取余)
				
3.6 自动递增和递减
		1-递增：++
		  递减：--
		2-两种使用方式：
			 1.前缀式：++a
			   变量或表达式运算前，值先改变
			 2.后缀式: a--
			   变量或表达式运算后，值再改变
		3-唯一会改变操作数本身的值--副作用	 		
		
3.7 关系操作符
		1-关系操作符生成的是一个boolean结果，它们计算的是操作数的值之间的关系
			 1.真：true
			   假：false
			 2. ==,!=,>,>=,<,<=				 
		2- ==,!=适合于所有的基本数据类型和对象，其他比较符不适合于boolean类型
			 1.==,!=比较对象时，实际比较的是对象的引用地址值
		3-比较对象的实际内容是否相等：equals();
		  该方法不适用于基本类型
		     1.equals()默认比较引用，需要重写
		
3.8 逻辑操作符
		1-逻辑操作符能根据参数的逻辑关系，生成一个布尔值。
		     1. &&(与) , ||(或), ^(异或), !(非)
		2-&&(与), ||(或), !(非)只可应用于布尔值
		3-浮点数的比较是非常严格，小数部分有极小差别，即不相等
		4-短路: 
			 1.一旦能明确整个表达式的值，余下部分不再计算
			 2.&&(与) , ||(或),
			 
3.9 直接常量
		1-数值用进制的方式表示
		2-十六进制数适用于所有的整数数据类型，前缀：0x
		  八进制前缀：0
		  二进制前缀：0b
		3-指数记数法
			 1.e代表：10的幂次方
			 2.double expDouble2 = 47e47
			 3.编译器会将指数作为双精度double处理，
			    所以float expFloat = 1.39E-43f;要加后缀f
				不然会报错，提示要强制转换
		
3.10 按位操作符
		1-操作整数基本数据类型中的单个”比特“，即二进制/布尔类型，执行布尔代数运算
		2-&(与位运算), |(或位运算), ^(异或位运算), ~(按位取反运算符--补码)
		3-可与等号联用：&= ， |= ，^=
		  ~因为是一元操作符，不可以
		
3.11 移位操作符
		1-操作的对象也是二进制的位，只能处理整数类型
		2-算术左移运算符<<(左移)：最左边丢弃位数，右边补齐相同的位数0；左边一位的相当于*2，3<<2==3*2*2(如果是负数--值为正数)
          算术右移运算符>>(有符号右移)：最高位是0，左边补齐0，最高位是1，左边补齐1；右移一位相当于除2取商
		  逻辑右移运算符>>>(无符号右移)：无论最高位是0还是1，左边补齐0；(如果是负数--值为庞大的正数)
		3-如果对char,byte,short进行移位处理前，它们会转换为int类型，结果也是int。
		4-可与等号组合使用：先移位，再赋值
		  特殊：byte,short进行移位，再赋值赋值时，会先转换为int类型，再赋值给原来的类型，结果为-1
		5-数值的二进制表示形式为：有符号的二进制补码		
		
3.12 三元操作符和if-else
		1-又称条件操作符，操作数有三个,会生成一个值
		2-表达式：one >5 ? a : b
				
3.13 字符串操作符 + 和 +=
		1-如果表达式是以一个字符串开头，编译器会把非字符串自动转换为字符串类型
		
3.14 使用操作符时常犯的错误
		1-Java中编译器不允许我们把一种类型当另一种类型使用
		     --&和&& ，|和||，=和==
		
3.15 类型转换操作符
		1-窄化转换：大转小，有可能信息丢失
		  扩展转换：小转大，安全
		2-布尔型数据不可以进行类型的转化处理
		3-截尾和舍入：
			 1.浮点数转化为整数，小数部分会去掉
			 2.Math类中的round()方法，可以舍入
		
3.16 Java没有“sizeof”
		1-在C和C++中，sizeof可以告诉数据项分配的字节数
		2-是为了在不同计算机移植问题
		
3.17 操作符小结
		1-足够大的2个int类型相乘，结果会溢出
		
3.18 总结




