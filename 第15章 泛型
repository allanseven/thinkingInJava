第15章 泛型

15.1 与C++的比较
		1-泛型实现了参数化类型的概念
		2-了解泛型的边界
		
15.2 简单泛型
		1-泛型主要指定容器要持有什么类型的对象
		2-<T>类型参数
		3-一个元组类库：
			 1.方法能返回多个对象--数据传送对象
			 2.<a,b,c...>
		4-一个堆栈类：一个内部类中，在构造器参数上嵌套多层的自己对象
		5-RandomList:持有特定类型对象的列表，随机选取元素
15.3 泛型接口
		1-生成器：专门生成对象的类
		2-接口的泛型参数是一个继承体系的基类
		3-基本类型无法作为类型参数，但可以自动装箱和拆箱
		4-通过继承来创建适配器类
		
15.4 泛型方法
		1-泛型方法使得该方法能独立于类而产生变化
			 1.static方法必须使用泛型方法，而不是泛型类的类型参数
			 2.泛型参数置于返回值之前
			 3.使用泛型类必须声明类型参数的值，泛型方法则不必--类型参数推断
			 4.杠杆利用类型参数推断
			 5.显示的类型说明：在点操作符与方法名之间插入 对象.<Person, List<Pet>>map()
			   内部：对象.this.<Person, List<Pet>>map()
			   static: 在点操作符加类名 New.<Person, List<Pet>>map()
		2-可变参数与泛型方法
			 1.<T> List<T> makeList(T... args) {
		3-用于Generator的泛型方法
			 1.<T> Collection<T> fill(Collection<T> coll, Generator<T> gen, int n) {
		4-一个通用Generator
			生成某个类的对象
			 1.它必须是public类
			 2.必须具备默认的构造器
		5-简化元组的使用：static+类型参数推断
		6-一个Set实用工具：EnumSet.range
			  --创建一个枚举集，最初包含两个指定端点定义的范围内的所有元素
15.5 匿名内部类
		1-泛型还可以用于内部类和匿名内部类
			
15.6 构建复杂模型
		1-一个实现生成器接口的元素类，再通过继承Collection集合接口的元素类，一层层进行组合嵌套的最终组合类
		2-一个包含生成器接口，Collection接口的Generator类
		
15.7 擦除的神秘之处
		1-Class c1 = new ArrayList<String>().getClass();
		  Class c2 = new ArrayList<Integer>().getClass();
		  c1 == c2 --> class java.util.ArrayList
		2-TypeVariable<Class<T>>[]	getTypeParameters()：以声明顺序返回一个TypeVariable对象数组，
			 表示有泛型声明所声明的类型参数--HashMap<K,V> 。
		3-在泛型代码内部，无法获得任何有关泛型参数类型的信息
		4-Java泛型使用擦除具体的类型信息
			 1.边界声明<T extends HasF>
		     2.当希望代码能够跨多个类工作时，使用泛型才有帮助
			 3.返回T的方法		
		5-迁移的兼容性
			 1.List<T>被擦除为List
			 2.普通的类型变量被擦除为Object
		6-擦除的问题
			 1.擦除主要是从非泛化代码到泛化代码的转变过程
			 2.泛型不能用于显示地引用运行时类型的操作之中：
			     --转型，instanceof操作和new表达式
			 3.class Derived3 extends GenericBase<?> {}报错，编译器需要一个原生的基类
		7-边界处的动作
			 1.可以表示没有任何意义的事物
			 2.在泛型中创造数组，使用Array.newInstance(Class<?> componentType, int length)
15.8 擦除的补偿
		1-任何在运行时需要知道确切类型信息的操作都无法工作
		2-类型标签： Class<T> kind;
		3-泛型数组
			 1.不能直接生成泛型数组：T[] array = new T[SIZE]; 
			 2.使用List<T> array = new ArrayList<T>();
			 3.成功创建泛型数组的唯一方式：创建一个被擦除类型的新数组，然后对其进行转型
				 --static Generic<Integer>[] gia;
				 --gia = (Generic<Integer>[])new Generic[SIZE];
			 4.数组的运行时类型只能是Object[]
			 5.类型标记Class<T> type，从擦除中恢复实际类型的数组		
15.9 边界
		1-无界泛型参数调用的方法只是Object能调用的方法
		  如果将参数限制为某个类型的子集，可以用这些类型子集来调用方法
		  Java重用了extends关键字
		2-多边界<POWER extends SuperHearing & SuperSmell>
		
15.10 通配符
		1-在谈论容器的类型时，List<Fruit> flist = new ArrayList<Apple>();错误
		  虽然，Apple extends Fruit 
		2-使用通配符建立类型转换关系：List<? extends Fruit> flist = new ArrayList<Apple>();
		3-一但执行类型的向上转换，将丢失向其中传递任何对象的能力，包括Object
		4-编译器有多聪明
			 1.编译器只关注传递进来和要返回的对象类型，它并不会分析代码，查看任何实际的写入和读取操作
		5-逆变：
			 1.超类型通配符：<? super Apple>--读操作
		6-无界通配符：<?>
			 1.原生List；持有任何Object类型
			 2.List<?>：具有某种特定类型的非原生List
			 3.Holder<?> holder持有具有某种具体类型的同构集合，不能只向其传递Object
			 4.Holder<? extends T> holder同上，holder.set(arg);错误
			 5.Holder<? super T> holder --holder.set(arg);可以
		7-捕获转换
			 1.未指定的通配符类型被捕获，转换为确切类型
15.11 问题
		1-任何基本类型都不能作为类型参数
			 1.使用包装器类
			 2.自动包装机制不能用于数组
			   Generator<java.lang.Integer>//区分相同类名
			   public java.lang.Integer next() {
		2-实现参数化接口
			 1.一个类不能实现同一个泛型接口的两种变体，由于擦除的原因，这两个变体会成为相同的接口
		3-转型和警告
			 1.使用带有泛型类型参数的转型或instanceof不会有任何效果
			 2.泛型没有消除对转型的需要，会产生警告List<Widget> shapes = (List<Widget>)in.readObject();
			 3.通过泛型类转型： List<Widget> lw2 = List.class.cast(in.readObject());
		4-重载
			 1.由于擦除的原因，重载方法将产生相同的类型签名
			 2.必须提供有区别的方法名：public class UseList2<W,T> {
										  void f1(List<T> v) {}
										  void f2(List<W> v) {}
										} 
		5-基类劫持了接口
			 1.和实现参数化接口相同，在继承基类的基础上，只能实现相同的参数化接口
			 2.如果不想实现相同的参数化接口，就不要继承基类
15.12 自限定的类型
		1-古怪的循环泛型：
			 1.public class CuriouslyRecurringGeneric extends GenericType<CuriouslyRecurringGeneric> {}
			 2.基类用导出类替代其参数
		2-自限定
			 1.基类用任何类型替代其参数
			   class Other {}
			   class BasicOther extends BasicHolder<Other> {}
			 2.自限定将采取额外的步骤，强制泛型当作其自己的边界参数来使用
			   class SelfBounded<T extends SelfBounded<T>> {
			 3.自限定的参数有何意义？
				 --保证类型参数必须与正在被定义的类相同
			 4.不能使用没有定义在自限定类型体系中的类  
			   如果移除自限定，采用简单泛型，就没有限制
				 --因此自限定限制只能强制作用于继承关系
			 5.自限定用于泛型方法
				 static <T extends SelfBounded<T>> T f(T arg) {
		3-参数协变
			 1.自限定会产生协变参数类型--方法参数类型会随子类而变化--1.5JDK
			 2.自限定泛型将产生确切的导出类型或基类作为其返回值
				 T get();
				 Getter result = g.get();
				 GenericGetter gg = g.get();			
			     在非泛型代码中，参数类型不能随子类型发生变化，发生重载
			 3.自限定的导出类中有一个方法接收导出类型而不是基类作为参数，
			   编译器无法识别基类作为参数传递
		
15.13 动态类型安全
		1-Collections中静态方法：checkedList/checkedMap/checkedSet/checkedSortedMap/checkedSortedSet
		  (List<E> list, Class<E> type)第一个参数：容器 第二个参数需要强制检查的类
		
15.14 异常
		1-由于擦除的原因，catch语句不能捕获泛型类型的异常
			 1.在编译器和运行期都必须知道异常的确切类型
			 2.泛型类不能直接或间接继承Throwable
		2-interface Processor<T,E extends Exception> {
		  class ProcessRunner<T,E extends Exception> extends ArrayList<Processor<T,E>> {
		  class Failure1 extends Exception {}
		  class Processor1 implements Processor<String,Failure1> {
		  class Failure2 extends Exception {}
		  class Processor2 implements Processor<Integer,Failure2> {
		
15.15 混型
		1-混合多个类
		2-与接口混合
			class Mixin extends BasicImp implements TimeStamped, SerialNumbered {
			private TimeStamped timeStamp = new TimeStampedImp();
		    private SerialNumbered serialNumber = new SerialNumberedImp();	
			接口的重写方法
		3-使用装饰器模式
			 1.装饰器模式使用分层对象来动态透明的向单个对象中添加责任
			 2.指定包装在最初的对象周围的所有对象都具有相同的基本接口
			 3.装饰器是通过使用组合和形式化结构来实现的，而混型是基于继承
			 4.装饰器中，只有最后一层的方法是可见的，即继承体系的根类
		4-与动态代理混合
			 1.实现动态代理接口implements InvocationHandler
			 2.重写invoke			
15.16 潜在类型机制
		1-鸭子类型机制
		2-潜在类型机制是一种代码组织和复用机制
		3-支持潜在类型机制的语言
			 1.Python动态
			 2.C++静态
			 3.因此，潜在类型机制不要求动态和静态类型检查
		
15.17 对缺乏潜在类型机制的补偿
		1-反射
		     1.没有任何公共基类或接口，但通过反射，可以调用它们的方法
		2-建一个方法用于序列
			 public static <T, S extends Iterable<? extends T>> void apply(S seq, Method f, Object... args) {
				try {
				  for(T t: seq)
					f.invoke(t, args);
				} catch(Exception e) {
				  // Failures are programmer errors
				  throw new RuntimeException(e);
				}
			  }
		3-当你并未碰巧拥有正确的接口时
			 public static <T> void fill(Collection<T> collection,
				Class<? extends T> classToken, int size) {
				  for(int i = 0; i < size; i++)
					// Assumes default constructor:
					try {
					  collection.add(classToken.newInstance());
					} catch(Exception e) {
					  throw new RuntimeException(e);
					}
				}
			被限制在collection继承结构内
		4-用适配器仿真潜在类型机制
			 1.用适配器匹配已有的接口，产生想要的接口
			 interface Addable<T> { void add(T t); }
			 
			class AddableCollectionAdapter<T> implements Addable<T> {
			  private Collection<T> c;
			  public AddableCollectionAdapter(Collection<T> c) {
				this.c = c;
			  }
			  public void add(T item) { c.add(item); }
			}
			class AddableSimpleQueue<T> extends SimpleQueue<T> implements Addable<T> {
			  public void add(T item) { super.add(item); }
			}
15.18 将函数对象用作策略
		1-从不同的函数对象定义接口开始

15.19 总结：转型真的如此之糟吗？
















